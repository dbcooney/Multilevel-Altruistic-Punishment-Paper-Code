"""
Script used to generate plots for Figure B.1 and the left panels of Figure B.2, which 
illustrate the average payoff achieved after a large number of time-steps for the dynamics 
of a two-level replicator equation on the simplex of groups featuring defectors, 
cooperators, and altruistic punishers. The average payoffs are plotting as a function of 
the strength \lambda of between-group competition, with comparisons provided to the
analytical formulas for average payoff achieved for two-level replicator dynamics on the 
defector-cooperator and defector-punisher edges of the simplex. 


This figure uses average payoff values stored in files contained in the Simulation_Outputs
folder, which were generated by running the script "loop_altruistic_LM_group.py" in the
Scripts folder.
"""


import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('TkAgg')
import os


from matplotlib import rc
rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
## for Palatino and other serif fonts use:
#rc('font',**{'family':'serif','serif':['Palatino']})
rc('text', usetex=True)

#eta = 1.0

plt.figure(1)

"""
Listing files used to store average payoffs for different values of the possible
punishment strengths p, fixed costs of punishment q, and per-interaction punishment cost
k. 
"""

script_folder = os.getcwd()
altruistic_folder = os.path.dirname(script_folder)

file1 = altruistic_folder + "/Simulation_Outputs/LMGplottrimorphicgroupq0p1p0p5.txt"
file2 = altruistic_folder + "/Simulation_Outputs/LMGplottrimorphicgroupq0p4p0p5.txt"
file3 = altruistic_folder + "/Simulation_Outputs/LMGplottrimorphicgroupk0p1p0p5.txt"
file4 = altruistic_folder + "/Simulation_Outputs/LMGplottrimorphicgroupk2p0p0p5.txt"
file5 = altruistic_folder + "/Simulation_Outputs/LMGplottrimorphicgroupq0p1p0p9.txt"
file6 = altruistic_folder + "/Simulation_Outputs/LMGplottrimorphicgroupq0p1p0p1.txt"
file7 = altruistic_folder + "/Simulation_Outputs/LMGplottrimorphicgroupq0p1p0p3.txt"
file8 = altruistic_folder + "/Simulation_Outputs/LMGplottrimorphicgroupq0p1p0p7.txt"
file9 = altruistic_folder + "/Simulation_Outputs/LMGplottrimorphicgroupq0p1p0p5.txt"



"""
Functions used to read in data from simulation outputs. 
"""
def process(list):
	list = list.split(',')
	list = [float(a) for a in list]
	return list

def find_lamb_list(f):
	f.readline()
	lamb_list = f.readline()
	lamb_list = process(lamb_list)
	return lamb_list

def avg_coop_list(f):
	f.readline()
		
	coop_list = f.readline()
	coop_list = process(coop_list)
	return coop_list	
	
def avg_punisher_list(f):
	f.readline()
	avg_punisher_list = f.readline()
	avg_punisher_list = process(avg_punisher_list)
	return avg_punisher_list
	
def avg_G_list(f):
	f.readline()
	avg_G_list = f.readline()
	avg_G_list = process(avg_G_list)
	return avg_G_list


"""
Formulas used to calculate average payoff on the defector-cooperator and defector-punisher
edges of the simplex, which are used as points of comparison with the average payoffs
calculated from numerical simulations of the trimorphic multilevel dynamics. 
"""

def G(y,b,c,p,q,k):
	return (b - (c+p+q+k)) * y + (p + k) * (y ** 2.0)
	
def G_j(j,N,b,c,p,q,k):
	gamma = b - (c+p+q+k)
	alpha = p+k
	return N * (0.5 * gamma * (2.0 * j + 1.0) * (N ** -2.0) + alpha * (1.0 / (3.0 * (N** 3.0))) * (3.0 * (j ** 2.0)  + 3.0 * j + 1.0))
	
G_vec = np.vectorize(G)
Gj_vec = np.vectorize(G_j)
	
def G_j_max(N,b,c,p,q,k):
	j_range = np.arange(0.,float(N) + 1.,1.)
	return np.max(Gj_vec(j_range,N,b,c,p,q,k))
	
def G_j_min(N,b,c,p,q,k):
	j_range = np.arange(0.,float(N) + 1.,1.)
	return np.min(Gj_vec(j_range,N,b,c,p,q,k))


	
def cooperation_CD(b,c,theta,lamb):
	if lamb < theta * c:
		return 0.
	else:
		return 1. - c * (theta / lamb)
		
def cooperation_PD(b,c,q,p,theta,lamb):
	if lamb < (c + q - p) * theta:
		return 0.
	else:
		return 1. - (c + q  - p) * (theta / lamb)
		

def avg_G_CD(b,c,theta,lamb):

	Gmax = 1.
	Gmin = 0.
	if lamb < theta * c:
		return 0.
	else:
		return (b-c) - c * (Gmax - Gmin) *(theta / lamb)
		
def avg_G_PD(b,c,q,p,k,theta,lamb):

	Gmax = 1.
	Gmin = 0.

	if c + q - p < 0:
		return b - c - q
	elif lamb < (c + q - p) * theta * (Gmax - Gmin):
		return 0.
	else:
		return (b-c-q) - (c + q  - p) * (Gmax - Gmin)* (theta / lamb)




"""
Reading in data on numerically calculated average payoffs, and preparing use of these
values to generate plots of average payoff. 
"""
		
cooperation_CD_vec = np.vectorize(cooperation_CD)
cooperation_PD_vec = np.vectorize(cooperation_PD)

avg_G_CD_vec = np.vectorize(avg_G_CD)
avg_G_PD_vec = np.vectorize(avg_G_PD)

	
#lamb_list = np.arange(0.,25.,0.25)

f1 = open(file1, 'r+')

lamb_list = find_lamb_list(f1)
print(lamb_list)
print(len(lamb_list))
avg_G_1_list = avg_G_list(f1)
#p_list = process(p_list)
avg_G_1_list[0] = 0.01
print(avg_G_1_list)



f1.close()





f2 = open(file2, 'r+')

lamb_list = find_lamb_list(f2)
avg_G_2_list = avg_coop_list(f2)

#p_list = process(p_list)

print(avg_G_2_list)



f2.close()





f3 = open(file3, 'r+')

lamb_list = find_lamb_list(f3)
avg_G_3_list = avg_G_list(f3)
#p_list = process(p_list)

print(avg_G_3_list)



f3.close()



f4 = open(file4, 'r+')

lamb_list = find_lamb_list(f4)
avg_G_4_list = avg_G_list(f4)
#p_list = process(p_list)

print(avg_G_4_list)


f4.close()



f5 = open(file5, 'r+')

lamb_list = find_lamb_list(f5)
avg_G_5_list = avg_G_list(f5)
#p_list = process(p_list)

print(avg_G_5_list)


f5.close()



f6 = open(file6, 'r+')

lamb_list = find_lamb_list(f6)
avg_G_6_list = avg_G_list(f6)
#p_list = process(p_list)

print(avg_G_6_list)


f6.close()


f7 = open(file7, 'r+')

lamb_list = find_lamb_list(f7)
avg_G_7_list = avg_G_list(f7)
#p_list = process(p_list)

print(avg_G_7_list)


f7.close()

f8 = open(file8, 'r+')

lamb_list = find_lamb_list(f8)
avg_G_8_list = avg_G_list(f8)
#p_list = process(p_list)

print(avg_G_8_list)


f8.close()



f9 = open(file9, 'r+')

lamb_list = find_lamb_list(f9)
avg_G_9_list = avg_G_list(f9)
#p_list = process(p_list)

print(avg_G_9_list)


f9.close()




"""
Plotting figure of average payoff for the case of fixed per-interaction punishment cost
given by q = 0.1 (used for Figure B.1, right).
"""

plt.figure(1)


plt.plot(lamb_list,avg_G_1_list, color = 'dodgerblue', lw = 7., label = r"C-D-P Simplex")
plt.plot(lamb_list, avg_G_CD_vec(3.,1.,1.,lamb_list), color = 'orange', lw = 6., ls = '--', label = r"C-D Edge")
plt.plot(lamb_list,avg_G_PD_vec(3.,1.,0.1,0.5,0.0,1.,lamb_list), color = 'k', lw = 6., ls = '--', label = r"P-D Edge")


plt.xlabel("Between-Group Selection Strength $\lambda$", fontsize = 20., labelpad = 10.)
plt.ylabel(r"Average Payoff $\langle G(\cdot,\cdot) \rangle_{f}$", fontsize = 20.)

plt.legend(loc = 'lower right', fontsize = 16.)

plt.tight_layout()


plt.savefig(altruistic_folder + "/Figures/LMtrimorphic_payoff_q0p1_p0p5.png" )




"""
Plotting figure of average payoff for the case of fixed punishment cost given by q = 0.4 
(used for Figure B.2, bottom-left). 
"""


plt.figure(2)

plt.plot(lamb_list,avg_G_2_list, color = 'dodgerblue', lw = 7., label = r"D-C-P Simplex")
plt.plot(lamb_list, avg_G_CD_vec(3.,1.,1.,lamb_list), color = 'orange', lw = 6., ls = '--', label = r"D-C Edge")
plt.plot(lamb_list, avg_G_PD_vec(3.,1.,0.4,0.5,0.,1.,lamb_list), color = 'k', lw = 6., ls = '--', label = r"D-P Edge")



plt.xlabel("Between-Group Selection Strength $\lambda$", fontsize = 20., labelpad = 10.)
plt.ylabel(r"Average Payoff $\langle G(\cdot,\cdot) \rangle_{f}$", fontsize = 20.)

plt.legend(loc = 'lower right', fontsize = 16.)

plt.tight_layout()
plt.savefig(altruistic_folder + "/Figures/LMtrimorphic_payoff_q0p4_p0p5.png" )



"""
Plotting figure of average payoff for the case of per-interaction punishment cost
of k = 0.1 (used for Figure B.1, left). 
"""

plt.figure(3)

plt.plot(lamb_list,avg_G_3_list, color = 'dodgerblue', lw = 7., label = r"D-C-P Simplex")
plt.plot(lamb_list, avg_G_CD_vec(3.,1.,1.,lamb_list), color = 'orange', lw = 6., ls = '--', label = r"D-C Edge")
plt.plot(lamb_list, avg_G_PD_vec(3.,1.,0.0,0.5,0.1,1.,lamb_list), color = 'k', lw = 6., ls = '--', label = r"D-P Edge")


plt.xlabel("Between-Group Selection Strength $\lambda$", fontsize = 20., labelpad = 10.)
plt.ylabel(r"Average Payoff $\langle G(\cdot,\cdot) \rangle_{f}$", fontsize = 20.)

plt.legend(loc = 'lower right', fontsize = 16.)

plt.tight_layout()
plt.savefig(altruistic_folder + "/Figures/LMtrimorphic_payoff_k0p1_p0p5.png" )



"""
Plotting figure of average payoff for the case of per-interaction punishment cost
of k = 2 (used for Figure B.2, top-left). 
"""

plt.figure(4)

plt.plot(lamb_list,avg_G_4_list, color = 'dodgerblue', lw = 7., label = r"D-C-P Simplex")
plt.plot(lamb_list, avg_G_CD_vec(3.,1.,1.,lamb_list), color = 'orange', lw = 6., ls = '--', label = r"D-C Edge")
plt.plot(lamb_list, avg_G_PD_vec(3.,1.,0.0,0.5,2.0,1.,lamb_list), color = 'k', lw = 6., ls = '--', label = r"D-P Edge")


plt.xlabel("Between-Group Selection Strength $\lambda$", fontsize = 20., labelpad = 10.)
plt.ylabel(r"Average Payoff $\langle G(\cdot,\cdot) \rangle_{f}$", fontsize = 20.)

plt.legend(loc = 'lower right', fontsize = 16.)

plt.tight_layout()
plt.savefig(altruistic_folder + "/Figures/LMtrimorphic_payoff_k2p0_p0p5.png")



plt.show()
