"""
Script used to generate Figure 6.2, which illustrates the average fraction of
non-defecting individualsachieved after a large number of time steps for the trimorphic 
multilevel model with group-level competition based on the difference in the fraction
of non-defecting individuals between the two competing groups. This figure also provides a
comparison with the analytically calculated average strategic compositions at steady state 
for the dimorphic competition on the defector-cooperator and defector-punisher edges of the 
simplex.

This figure uses simulation data generated by running the file 
loop_lambda_trimorphic_altruistic.py in the Scripts folder.
"""


import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('TkAgg')
import os


from matplotlib import rc
rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
## for Palatino and other serif fonts use:
#rc('font',**{'family':'serif','serif':['Palatino']})
rc('text', usetex=True)

#eta = 1.0

plt.figure(1)

script_folder = os.getcwd()
altruistic_folder = os.path.dirname(script_folder)


"""
Files generated by loop_lambda_trimorphic_altruistic.py".
"""

file1 = altruistic_folder + "/Simulation_Outputs/Coopplottrimorphiccooperationq0p1p0p5.txt"
file2 = altruistic_folder + "/Simulation_Outputs/Coopplottrimorphiccooperationq0p4p0p5.txt"
file3 = altruistic_folder + "/Simulation_Outputs/Coopplottrimorphiccooperationk0p1p0p5.txt"
file4 = altruistic_folder + "/Simulation_Outputs/Coopplottrimorphiccooperationk0p4p0p5.txt"
file5 = altruistic_folder + "/Simulation_Outputs/Coopplottrimorphiccooperationk0p1p0p7.txt"
file6 = altruistic_folder + "/Simulation_Outputs/Coopplottrimorphiccooperationk0p1p0p9.txt"
file7 = altruistic_folder + "/Simulation_Outputs/Coopplottrimorphiccooperationk0p1p0p3.txt"
file8 = altruistic_folder + "/Simulation_Outputs/Coopplottrimorphiccooperationk0p1p0p1.txt"


"""
Functions used to read in simulation data
"""
def process(list):
	list = list.split(',')
	list = [float(a) for a in list]
	return list

def find_lamb_list(f):
	f.readline()
	lamb_list = f.readline()
	lamb_list = process(lamb_list)
	return lamb_list

def avg_coop_list(f):
	f.readline()
		
	coop_list = f.readline()
	coop_list = process(coop_list)
	return coop_list	
	
def avg_punisher_list(f):
	f.readline()
	avg_punisher_list = f.readline()
	avg_punisher_list = process(avg_punisher_list)
	return avg_punisher_list
	

"""
Analytical expressions for average fraction of non-defecting individuals achieved at
steady state on defector-cooperator and defector-punisher edges of the simplex.
"""
	
def cooperation_CD(b,c,theta,lamb):
	if lamb < theta * c:
		return 0.
	else:
		return 1. - c * (theta / lamb)
		
def cooperation_PD(b,c,q,p,theta,lamb):
	if lamb < (c + q - p) * theta:
		return 0.
	else:
		return 1. - (c + q  - p) * (theta / lamb)
		
cooperation_CD_vec = np.vectorize(cooperation_CD)
cooperation_PD_vec = np.vectorize(cooperation_PD)
	

"""
Loading in simulation data from files store in Simulation_Outputs folder.
"""

f1 = open(file1, 'r+')

lamb_list = find_lamb_list(f1)
print(lamb_list)
print(len(lamb_list))
coop_1_list = avg_coop_list(f1)


print(coop_1_list)


punish_1_list = avg_punisher_list(f1)

print(punish_1_list)

f1.close()

total_coop_1_list = []
for a in range(len(lamb_list)):
	total_coop_1_list.append(coop_1_list[a] + punish_1_list[a])



f2 = open(file2, 'r+')

lamb_list = find_lamb_list(f2)
coop_2_list = avg_coop_list(f2)

print(coop_2_list)


punish_2_list = avg_punisher_list(f2)

print(punish_2_list)

f2.close()

total_coop_2_list = []
for a in range(len(lamb_list)):
	total_coop_2_list.append(coop_2_list[a] + punish_2_list[a])
	
print(total_coop_2_list)



f3 = open(file3, 'r+')

lamb_list = find_lamb_list(f3)
coop_3_list = avg_coop_list(f3)


print(coop_3_list)


punish_3_list = avg_punisher_list(f3)

print(punish_3_list)

f3.close()

total_coop_3_list = []
for a in range(len(lamb_list)):
	total_coop_3_list.append(coop_3_list[a] + punish_3_list[a])
	
print(total_coop_3_list)


f4 = open(file4, 'r+')

lamb_list = find_lamb_list(f4)
coop_4_list = avg_coop_list(f4)


print(coop_4_list)


punish_4_list = avg_punisher_list(f4)

print(punish_4_list)

f4.close()

total_coop_4_list = []
for a in range(len(lamb_list)):
	total_coop_4_list.append(coop_4_list[a] + punish_4_list[a])
	
print(total_coop_4_list)




f5 = open(file5, 'r+')

lamb_list = find_lamb_list(f5)
coop_5_list = avg_coop_list(f5)


print(coop_5_list)


punish_5_list = avg_punisher_list(f5)

print(punish_5_list)

f5.close()

total_coop_5_list = []
for a in range(len(lamb_list)):
	total_coop_5_list.append(coop_5_list[a] + punish_5_list[a])
	
print(total_coop_5_list)




f6 = open(file6, 'r+')

lamb_list = find_lamb_list(f6)
coop_6_list = avg_coop_list(f6)


print(coop_6_list)


punish_6_list = avg_punisher_list(f6)

print(punish_6_list)

f6.close()

total_coop_6_list = []
for a in range(len(lamb_list)):
	total_coop_6_list.append(coop_6_list[a] + punish_6_list[a])
	
print(total_coop_6_list)


f7 = open(file7, 'r+')

lamb_list = find_lamb_list(f7)
coop_7_list = avg_coop_list(f7)


print(coop_7_list)


punish_7_list = avg_punisher_list(f7)

print(punish_7_list)

f7.close()

total_coop_7_list = []
for a in range(len(lamb_list)):
	total_coop_7_list.append(coop_7_list[a] + punish_7_list[a])
	
print(total_coop_7_list)


f8 = open(file8, 'r+')

lamb_list = find_lamb_list(f8)
coop_8_list = avg_coop_list(f8)


print(coop_8_list)


punish_8_list = avg_punisher_list(f8)

print(punish_8_list)

f8.close()

total_coop_8_list = []
for a in range(len(lamb_list)):
	total_coop_8_list.append(coop_8_list[a] + punish_8_list[a])
	
print(total_coop_8_list)



"""
Generating Figure 6.2 (left), describing average fraction of non-defectors for case of
per-interaction punishment cost of k = 0.5.
"""

plt.figure(1)

plt.plot(lamb_list,total_coop_3_list, color = 'dodgerblue', lw = 7., label = r"C-D-P Simplex")
plt.plot(lamb_list, cooperation_CD_vec(3.,1.,1.,lamb_list), color = 'orange', lw = 5., ls = '--', label = r"C-D Edge")
plt.plot(lamb_list, cooperation_PD_vec(3.,1.,0.0,0.5,1.,lamb_list), color = 'k', lw = 5., ls = '--', label = r"P-D Edge")

plt.xlabel("Between-Group Selection Strength $\lambda$", fontsize = 20., labelpad = 10.)
plt.ylabel("Fraction Cooperating ($1-y$)", fontsize = 20.)

plt.legend(loc = 'lower right', fontsize = 16.)

plt.tight_layout()

plt.savefig(altruistic_folder + "/Figures/trimorphic_coop_k0p1_p0p5.png")


"""
Generating Figure 6.2(right), which displays fraction of non-defecting individuals 
achieved after many time-steps for various strengths of punishment p. 
"""


plt.figure(2)


plt.plot(lamb_list,total_coop_8_list, color = plt.cm.YlOrRd(0.1), lw = 5., label = r"$p = 0.1$")
plt.plot(lamb_list,total_coop_7_list, color = plt.cm.YlOrRd(0.3), lw = 5., label = r"$p = 0.3$")
plt.plot(lamb_list,total_coop_3_list, color = plt.cm.YlOrRd(0.5), lw = 5., label = r"$p = 0.5$")
plt.plot(lamb_list,total_coop_5_list, color = plt.cm.YlOrRd(0.7), lw = 5., label = r"$p = 0.7$")
plt.plot(lamb_list,total_coop_6_list, color = plt.cm.YlOrRd(0.9), lw = 5., label = r"$p = 0.9$")



plt.plot(lamb_list, cooperation_CD_vec(3.,1.,1.,lamb_list), color = 'b', lw = 5., ls = '--', label = r"CD Edge")

plt.axis([-0.01,12.,0.,1.01])


plt.legend(loc = "lower right", fontsize =16.)


plt.xlabel("Between-Group Selection Strength $\lambda$", fontsize = 20., labelpad = 10.)
plt.ylabel("Fraction Cooperating ($1-y$)", fontsize = 20.)

plt.tight_layout()



plt.savefig(altruistic_folder + "/Figures/trimorphic_coop_pcompare.png")

print("Hello")

plt.show()
