"""
Script used to generate Figure 6.4, which illustrates the average fraction of
non-defecting individualsachieved after a large number of time steps for the trimorphic 
multilevel model with group-level competition based on the normalized difference in the 
average payoff of the two competing groups. This figure also provides a
comparison with the analytically calculated average strategic compositions at steady state 
for the dimorphic competition on the defector-cooperator and defector-punisher edges of the 
simplex.

This script is also used to produce the plots in the right panels in Figure B.2, which
provides a comparison of steady-state behavior for trimorphic dynamics under a two-level 
replicator equation and under pairwise group competition based on globally normalized 
differences in average payoff.

This script uses simulation data generated by running the file 
loop_lambda_trimorphic_altruistic.py in the Scripts folder.
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('TkAgg')
import os


from matplotlib import rc
rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
## for Palatino and other serif fonts use:
#rc('font',**{'family':'serif','serif':['Palatino']})
rc('text', usetex=True)


plt.figure(1)

script_folder = os.getcwd()
altruistic_folder = os.path.dirname(script_folder)

"""
Files generated by loop_lambda_trimorphic_altruistic.py".
"""

file1 = altruistic_folder + "/Simulation_Outputs/Gplottrimorphicgroupq0p1p0p5.txt"
file2 = altruistic_folder + "/Simulation_Outputs/Gplottrimorphicgroupq0p4p0p5.txt"
file3 = altruistic_folder + "/Simulation_Outputs/Gplottrimorphicgroupk0p1p0p5.txt"
file4 = altruistic_folder + "/Simulation_Outputs/Gplottrimorphicgroupk2p0p0p5.txt"
file5 = altruistic_folder + "/Simulation_Outputs/Gplottrimorphicgroupk0p1p0p5.txt"
file6 = altruistic_folder + "/Simulation_Outputs/Gplottrimorphicgroupq0p1p0p5.txt"
file7 = altruistic_folder + "/Simulation_Outputs/Gplottrimorphicgroupk0p1p0p5.txt"
file8 = altruistic_folder + "/Simulation_Outputs/Gplottrimorphicgroupk0p1p0p5.txt"


"""
Functions used to read in simulation data
"""

def process(list):
	list = list.split(',')
	list = [float(a) for a in list]
	return list

def find_lamb_list(f):
	f.readline()
	lamb_list = f.readline()
	lamb_list = process(lamb_list)
	return lamb_list

def avg_coop_list(f):
	f.readline()
		
	coop_list = f.readline()
	coop_list = process(coop_list)
	return coop_list	
	
def avg_punisher_list(f):
	f.readline()
	avg_punisher_list = f.readline()
	avg_punisher_list = process(avg_punisher_list)
	return avg_punisher_list
	
def avg_G_list(f):
	f.readline()
	avg_G_list = f.readline()
	avg_G_list = process(avg_G_list)
	return avg_G_list


"""
Calculation of average payoff expressions, as well as maximum and minimum possible 
average group payoff for computing normalized difference in average payoffs. 
"""

def G(y,b,c,p,q,k):
	return (b - (c+p+q+k)) * y + (p + k) * (y ** 2.0)
	
def G_j(j,N,b,c,p,q,k):
	gamma = b - (c+p+q+k)
	alpha = p+k
	return N * (0.5 * gamma * (2.0 * j + 1.0) * (N ** -2.0) + alpha * (1.0 / (3.0 * (N** 3.0))) * (3.0 * (j ** 2.0)  + 3.0 * j + 1.0))
	
G_vec = np.vectorize(G)
Gj_vec = np.vectorize(G_j)
	
def G_j_max(N,b,c,p,q,k):
	j_range = np.arange(0.,float(N) + 1.,1.)
	return np.max(Gj_vec(j_range,N,b,c,p,q,k))
	
def G_j_min(N,b,c,p,q,k):
	j_range = np.arange(0.,float(N) + 1.,1.)
	return np.min(Gj_vec(j_range,N,b,c,p,q,k))



group_rate_type = "average payoff"

def Gjk(j,k,b,c,p,kappa,kG,N):

	N = float(N)
	x = float(j) / N
	y = float(k) / N
	
	if j + k < N-1:
		if group_rate_type == "average payoff":
			total = b - c  - (b - c + kappa + p) * (y + 0.5 / N)  \
			+ (kappa + p) * (x * y + (0.5 / N) * (x + y) + 0.25 / (N**4.))  \
			+ (kappa + p) * (y**2. + y / (N) + 1. / (3. * N**2.)) - kG * (1. - x - y - 1./N)
			
		elif group_rate_type == "fraction cooperating":
			total = 1.0 - (y - 0.5 / N)
		
		
		return total
	elif j + k == N-1:
		if group_rate_type == "average payoff":
			total = b - c  -   (b-c + kappa + p) * (1. - x - 2. / (3. * N))  \
			+   (kappa + p) * (x + 1. / (3. * N) - x**2. - x / N - 1. / (4. * N**2.)) \
			+  (kappa + p) * ((1. - x)**2. - (4. * (1. - x)) / (3. * N) + 1. / (4. * N**2.)) \
			- kG * (1.0/N - 1./(3. * (N**2.)))
		
		elif group_rate_type == "fraction cooperating":
			#total = x + 1. / (3. * (N**2.))
			#1. - (y + 1. / (3. * (N**2.)))
			total = x - 1. / (3. * (N**2.)) + 1. / N
		return total
	else:
		return None
		
		
Gjk_vec = np.vectorize(Gjk)

N =100
b = 3.
c = 1.
def group_birth(j,k,b,c,p,kappa,kG,N):
	if j + k < N - 1:
		return Gjk(j,k,b,c,p,kappa,kG,N)
	elif j + k == N-1:
		return Gjk(j,k,b,c,p,kappa,kG,N)
	else:
		return 0.



group_birth_values = np.zeros((N,N))	
cooperator_values = np.zeros((N,N))
punisher_values = np.zeros((N,N))
	

		
		
"""
Analytical expressions for average payoff achieved at steady state on defector-cooperator 
and defector-punisher edges of the simplex.
"""
	

Gmax = np.max(group_birth_values)
Gmin = np.min(group_birth_values)
	
def cooperation_CD(b,c,theta,lamb):
	if lamb < theta * c:
		return 0.
	else:
		return 1. - c * (theta / lamb)
		
def cooperation_PD(b,c,q,p,theta,lamb):
	if lamb < (c + q - p) * theta:
		return 0.
	else:
		return 1. - (c + q  - p) * (theta / lamb)
		

def avg_G_CD(b,c,theta,lamb,Gmax,Gmin):
	
	if lamb < theta * c:
		return 0.
	else:
		return (b-c) - c * (Gmax - Gmin) *(theta / lamb)
		
def avg_G_PD(b,c,q,p,k,theta,lamb,Gmax,Gmin):

	if c + q - p < 0:
		return b - c - q
	elif lamb < ((c + q - p) * theta * (Gmax - Gmin))/(b-c-q):
		return 0.
	else:
		return (b-c-q) - (c + q  - p) * (Gmax - Gmin)* (theta / lamb)


		
cooperation_CD_vec = np.vectorize(cooperation_CD)
cooperation_PD_vec = np.vectorize(cooperation_PD)

avg_G_CD_vec = np.vectorize(avg_G_CD)
avg_G_PD_vec = np.vectorize(avg_G_PD)
	


"""
Loading in simulation data from files store in Simulation_Outputs folder.
"""

f1 = open(file1, 'r+')

lamb_list = find_lamb_list(f1)
print(lamb_list)
print(len(lamb_list))
avg_G_1_list = avg_G_list(f1)


print(avg_G_1_list)



f1.close()



f2 = open(file2, 'r+')

lamb_list = find_lamb_list(f2)
avg_G_2_list = avg_coop_list(f2)


print(avg_G_2_list)



f2.close()





f3 = open(file3, 'r+')

lamb_list = find_lamb_list(f3)
avg_G_3_list = avg_G_list(f3)


print(avg_G_3_list)



f3.close()



f4 = open(file4, 'r+')

lamb_list = find_lamb_list(f4)
avg_G_4_list = avg_G_list(f4)


print(avg_G_4_list)


f4.close()



f5 = open(file5, 'r+')

lamb_list = find_lamb_list(f5)
avg_G_5_list = avg_G_list(f5)


print(avg_G_5_list)


f5.close()



f6 = open(file6, 'r+')

lamb_list = find_lamb_list(f6)
avg_G_6_list = avg_G_list(f6)


print(avg_G_6_list)


f6.close()


f7 = open(file7, 'r+')

lamb_list = find_lamb_list(f7)
avg_G_7_list = avg_G_list(f7)


print(avg_G_7_list)


f7.close()

f8 = open(file8, 'r+')

lamb_list = find_lamb_list(f8)
avg_G_8_list = avg_G_list(f8)


print(avg_G_8_list)


f8.close()



"""
Generating Figure 6.4 (left), describing average payoff at steady state for case of
fixed punishment cost q = 0.1.
"""




plt.figure(1)

for j in range(N):
	for k in range(N):
		group_birth_values[j,k] = group_birth(j,k,3.,1.,0.5,0.,0.1,N)	
		
Gmax = np.max(group_birth_values)
Gmin = np.min(group_birth_values)


plt.plot(lamb_list,avg_G_1_list, color = 'dodgerblue', lw = 7., label = r"C-D-P Simplex")
plt.plot(lamb_list, avg_G_CD_vec(3.,1.,1.,lamb_list,Gmax,Gmin), color = 'orange', lw = 6., ls = '--', label = r"C-D Edge")
plt.plot(lamb_list,avg_G_PD_vec(3.,1.,0.1,0.5,0.0,1.,lamb_list,Gmax,Gmin), color = 'k', lw = 6., ls = '--', label = r"P-D Edge")


plt.xlabel("Between-Group Selection Strength $\lambda$", fontsize = 20., labelpad = 10.)
plt.ylabel(r"Average Group Payoff $\langle G(\cdot,\cdot)\rangle_{f}$", fontsize = 20.)
print(Gmin)
plt.legend(loc = 'lower right', fontsize = 16.)

plt.tight_layout()


plt.savefig(altruistic_folder + "/Figures/trimorphic_payoff_q0p1_p0p5.png")


"""
Generating Figure B.2 (bottom-right), describing average payoff at steady state for case of
fixed punishment cost q = 0.4.
"""

plt.figure(2)


for j in range(N):
	for k in range(N):
		group_birth_values[j,k] = group_birth(j,k,3.,1.,0.5,0.,0.4,N)	
		
Gmax = np.max(group_birth_values)
Gmin = np.min(group_birth_values)


plt.plot(lamb_list,avg_G_2_list, color = 'dodgerblue', lw = 7.,  label = r"C-D-P Simplex")
plt.plot(lamb_list, avg_G_CD_vec(3.,1.,1.,lamb_list,Gmax,Gmin), color = 'orange', lw = 6., ls = '--',label = r"C-D Edge")
plt.plot(lamb_list, avg_G_PD_vec(3.,1.,0.4,0.5,0.,1.,lamb_list,Gmax,Gmin), color = 'k', lw = 6., ls = '--', label = r"P-D Edge")

print(Gmin)


plt.xlabel("Between-Group Selection Strength $\lambda$", fontsize = 20., labelpad = 10.)
plt.ylabel(r"Average Group Payoff $\langle G(\cdot,\cdot)\rangle_{f}$", fontsize = 20.)
print(Gmin)
plt.legend(loc = 'lower right', fontsize = 16.)

plt.tight_layout()


plt.savefig(altruistic_folder + "/Figures/trimorphic_payoff_q0p4_p0p5.png" )



"""
Generating Figure 6.4 (right), describing average payoff at steady state for case of
fixed punishment cost k = 0.1.
"""

plt.figure(3)

for j in range(N):
	for k in range(N):
		group_birth_values[j,k] = group_birth(j,k,3.,1.,0.5,0.1,0.0,N)	
		
Gmax = np.max(group_birth_values)
Gmin = np.min(group_birth_values)


plt.plot(lamb_list,avg_G_3_list, color = 'dodgerblue', lw = 7., label = r"C-D-P Simplex")
plt.plot(lamb_list, avg_G_CD_vec(3.,1.,1.,lamb_list,Gmax,Gmin), color = 'orange', lw = 6., ls = '--', label = r"C-D Edge")
plt.plot(lamb_list,avg_G_PD_vec(3.,1.,0.0,0.5,0.1,1.,lamb_list,Gmax,Gmin), color = 'k', lw = 6., ls = '--', label = r"P-D Edge")


plt.xlabel("Between-Group Selection Strength $\lambda$", fontsize = 20., labelpad = 10.)
plt.ylabel(r"Average Group Payoff $\langle G(\cdot,\cdot)\rangle_{f}$", fontsize = 20.)

plt.legend(loc = 'lower right', fontsize = 16.)
print(Gmin)

plt.tight_layout()


plt.savefig(altruistic_folder + "/Figures/trimorphic_payoff_k0p1_p0p5.png")


"""
Generating Figure B.2 (top-right), describing average payoff at steady state for case of
per-interaction punishment cost k = 2.
"""

plt.figure(4)

for j in range(N):
	for k in range(N):
		group_birth_values[j,k] = group_birth(j,k,3.,1.,0.5,2.0,0.0,N)	
		
Gmax = np.max(group_birth_values)
Gmin = np.min(group_birth_values)


plt.plot(lamb_list,avg_G_4_list, color = 'dodgerblue', lw = 7., label = r"C-D-P Simplex")
plt.plot(lamb_list, avg_G_CD_vec(3.,1.,1.,lamb_list,Gmax,Gmin), color = 'orange', lw = 6., ls = '--', label = r"C-D Edge")
plt.plot(lamb_list,avg_G_PD_vec(3.,1.,0.0,0.5,2.0,1.,lamb_list,Gmax,Gmin), color = 'k', lw = 6., ls = '--', label = r"P-D Edge")


plt.xlabel("Between-Group Selection Strength $\lambda$", fontsize = 20., labelpad = 10.)
plt.ylabel(r"Average Group Payoff $\langle G(\cdot,\cdot)\rangle_{f}$", fontsize = 20.)

plt.legend(loc = 'lower right', fontsize = 16.)
print(Gmin)

plt.tight_layout()


plt.savefig(altruistic_folder + "/Figures/trimorphic_payoff_k2p0_p0p5.png")



plt.show()
